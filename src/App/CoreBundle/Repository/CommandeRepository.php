<?php

namespace App\CoreBundle\Repository;

use App\CoreBundle\Entity\Commande;

/**
 * CommandeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommandeRepository extends \Doctrine\ORM\EntityRepository
{
	public function create() {
        return new Commande;
    }

    public function findEntities($key = null)
    {
        $query = $this->createQueryBuilder('e')
                ->select('e','u', 'd')
                ->leftJoin('e.client', 'u')
                ->leftJoin('e.dechet', 'd')
                ->orderBy('e.id', 'DESC');
                if(null !== $key){
                    $query->where('u.name LIKE :key OR d.name LIKE :key')
                        ->setParameter('key', '%'.$key.'%');
                }

        return $query->getQuery()->getResult();
    }
    
    public function findEntityBySlug($slug)
    {
        return $this->createQueryBuilder('e')
                ->select('e','u')
                ->leftJoin('e.client', 'u')

                ->where('e.slug = :slug')
                ->where('e.enabled = 1')
                ->setParameters(['slug' => $slug])           
                ->getQuery()
                ->getOneOrNullResult();
    }
    public function findEntityByIdAndClientid($id, $client_id)
    {
        return $this->createQueryBuilder('e')
                ->select('e','c')
                ->leftJoin('e.client', 'c')
                ->where('e.id = :id')
                ->andWhere('c.id = :client_id')
                ->setParameters(['slug' => $slug, 'client_id' => $client_id])
                ->getQuery()
                ->getOneOrNullResult();
    }

    public function findEntityByUser($client_id)
    {
        return $this->createQueryBuilder('e')
                ->select('e','c')
                ->leftJoin('e.client', 'c')
                ->where('c.id = :client_id')
                ->setParameters(['client_id' => $client_id])
                ->getQuery()
                ->getResult();
    }

	public function findLatestUncheckeds($limit)
    {
        return $this->createQueryBuilder('e')
                ->select('e')
                ->where('e.checked = :checked')
                ->setParameter('checked', 0) 
                ->orderBy('e.id', 'DESC')
            	->setMaxResults($limit)
            	->getQuery()
            	->getResult();
    }

    public function findFilter($filter)
    {
        return $this->createQueryBuilder('e')
                ->select('e')
                ->where('e.'.$filter.' = :filter')
                ->setParameter('filter', 0) 
                ->orderBy('e.id', 'DESC')
                ->getQuery()
                ->getResult();
    }

    public function countUnchecked()
    {
        $query = $this
            ->createQueryBuilder('e')
            ->select('COUNT(e.id)')
            ->where('e.checked = :checked')
            ->setParameter('checked', 0);

        return $query->getQuery()->getSingleScalarResult();
    }

    public function countAll()
    {
        return $this
            ->createQueryBuilder('e')
            ->select('COUNT(e.id)')
            ->getQuery()
            ->getSingleScalarResult();
    }
    public function filterAll($filter)
    {
        $qb = $this->createQueryBuilder('e')->update();
                    
        'checked' === $filter
            ? $qb->set('e.'.$filter, 1)->where('e.'.$filter.' = 0')
            : $qb->set('e.'.$filter, 0)->where('e.'.$filter.' = 1');
            
        return $qb->getQuery()->getResult();
    }

    public function deleteAll($filter)
    {
        return $this->createQueryBuilder('e')
                    ->where('e.'.$filter.' = :filter')
                    ->setParameter('filter', false)
                    ->delete()
                    ->getQuery()
                    ->execute();
    }
}
